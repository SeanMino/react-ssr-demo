async function getArticle(ctx) {
  const { article } = ctx.params;
  // 这里可以 细化为一个服务，目前是写死的。
  let result = {
    "content": {
      "title": "维护 service-worker.js 文件",
      "category": "前端",
      "content": "<h1><a href='#维护-service-worker.js-文件' id='维护-service-worker.js-文件' class='anchor'></a><a href='#维护-service-worker.js-文件'>维护 service-worker.js 文件</a></h1><p>开始之前，您可以查看 Service Worker 相关内容，快速掌握相关基础。查看 Service Worker 浏览器支持情况open_in_new</p>\n<p>service-worker.js 文件作为缓存管理的重要文件，在导出 Lavas 工程的时候我们默认给了一个能覆盖缓存需求的 <code>/dist/service-worker.js</code> 文件。 但是我们默认提供的文件可能在后续您的开发过程中并不能完全覆盖您的需求，所以你需要对其进行一定的维护。</p>\n<h2><a href='#service-worker.js' id='service-worker.js' class='anchor'></a><a href='#service-worker.js'>service-worker.js</a></h2><p>导出项目中，使用了 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\">Service Worker</a> + <a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a> + <a href=\"https://www.npmjs.com/package/sw-precache-webpack-plugin\">sw-precache-webpack-plugin</a> (Webpack 插件) 的方式，仅在 build 后自动生成可见的 service-worker.js 文件，该文件有如下特征：</p>\n<ul>\n<li>支持离线缓存静态资源能力</li>\n<li>通过配置实现动态网络请求和静态资源文件的缓存和更新机制</li>\n<li>支持 <code>service-worker.js</code> 文件更新时，页面提示更新重载</li>\n</ul>\n<p>如果开发者没有特殊的缓存需求，可直接使用。如果开发者需要后续工程的定制化，就要再深入了解以下几方面内容：</p>\n<h2><a href='#如何配置缓存内容' id='如何配置缓存内容' class='anchor'></a><a href='#如何配置缓存内容'>如何配置缓存内容</a></h2><p>开发者可通过 <code>config/sw-precache.js</code>文件进行缓存配置，根据配置为用户缓存网站静态与动态资源，并截获用户的所有网络请求，决定是从缓存还是网络获取相应资源，限制缓存大小等。对于无额外需求的开发者，一般仅需配置该文件就可满足项目需求，不配置默认缓存所有静态资源。</p>\n<p>下面来看一下，具体配置结构（此处给出了一些常用配置，更全面的配置可通过 <a href=\"https://github.com/GoogleChrome/sw-precache\">sw-precache</a>），该配置在 <code>webpack.prod.conf.js</code>中被 <a href=\"https://www.npmjs.com/package/sw-precache-webpack-plugin\">sw-precache-webpack-plugin</a> 组件作为参数引入，build 时起作用，生成定制化 <code>service-worker.js</code> 文件。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">/* sw-precache.js中的配置 */</span>\n\nbuild: {\n\n    <span class=\"hljs-attr\">cacheId</span>: <span class=\"hljs-string\">'my-vue-app'</span>,\n\n    <span class=\"hljs-comment\">// 生成的文件名称</span>\n    filename: <span class=\"hljs-string\">'service-worker.js'</span>,\n\n    <span class=\"hljs-comment\">// 需缓存的文件配置, 可以逐项添加, 需动态缓存的放到runtimeCaching中处理</span>\n    staticFileGlobs: [\n        <span class=\"hljs-comment\">// 'dist/index.html',</span>\n        <span class=\"hljs-comment\">// 'dist/static/**/**.*'</span>\n    ],\n\n    <span class=\"hljs-comment\">// webpack生成的静态资源全部缓存</span>\n    mergeStaticsConfig: <span class=\"hljs-literal\">true</span>,\n\n    <span class=\"hljs-comment\">// 忽略的文件</span>\n    staticFileGlobsIgnorePatterns: [\n        <span class=\"hljs-regexp\">/\\.map$/</span> <span class=\"hljs-comment\">// map文件不需要缓存</span>\n    ],\n\n    <span class=\"hljs-comment\">// 需要省略掉的前缀名</span>\n    stripPrefix: <span class=\"hljs-string\">'dist/'</span>,\n\n    <span class=\"hljs-comment\">// 当请求路径不在缓存里的返回，对于单页应用来说，入口点是一样的</span>\n    navigateFallback: <span class=\"hljs-string\">'/index.html'</span>,\n\n    <span class=\"hljs-comment\">// 白名单包含所有的.html (for HTML imports) 和路径中含 `/data/`</span>\n    navigateFallbackWhitelist: [<span class=\"hljs-regexp\">/^(?!.*\\.html$|\\/data\\/).*/</span>],\n\n    <span class=\"hljs-comment\">// 是否压缩，默认不压缩</span>\n    minify: <span class=\"hljs-literal\">true</span>,\n\n    <span class=\"hljs-comment\">// 最大缓存大小</span>\n    maximumFileSizeToCacheInBytes: <span class=\"hljs-number\">4194304</span>,\n\n    <span class=\"hljs-comment\">// 生成service-worker.js的文件配置模板，不配置时采用默认的配置</span>\n    <span class=\"hljs-comment\">// 本demo做了sw的更新策略，所以在原有模板基础做了相应的修改</span>\n    templateFilePath: <span class=\"hljs-string\">'config/sw.tmpl.js'</span>,\n\n    <span class=\"hljs-attr\">verbose</span>: <span class=\"hljs-literal\">true</span>,\n\n    <span class=\"hljs-comment\">// 需要根据路由动态处理的文件</span>\n    runtimeCaching: [\n        <span class=\"hljs-comment\">// 如果在staticFileGlobs中设置相同的缓存路径，可能导致此处不起作用</span>\n        {\n            <span class=\"hljs-attr\">urlPattern</span>: <span class=\"hljs-regexp\">/\\/fonts\\//</span>,\n            <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-string\">'networkFirst'</span>,\n            <span class=\"hljs-attr\">options</span>: {\n                <span class=\"hljs-attr\">cache</span>: {\n                    <span class=\"hljs-attr\">maxEntries</span>: <span class=\"hljs-number\">10</span>,\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'fonts-cache'</span>\n                }\n            }\n        }\n    ]\n}\n\n\n<span class=\"hljs-comment\">// webpack.prod.conf.js 中通过组件引入配置，生成文件</span>\n<span class=\"hljs-keyword\">new</span> SWPrecacheWebpackPlugin(config.swPrecache.build);\n</code></pre><p>更加详细的内容，可以参考 <a href=\"https://www.npmjs.com/package/sw-precache-webpack-plugin\">sw-precache-webpack-plugin</a>了解详情。</p>\n<h2><a href='#如何修改-service-worker.js-文件内容' id='如何修改-service-worker.js-文件内容' class='anchor'></a><a href='#如何修改-service-worker.js-文件内容'>如何修改 service-worker.js 文件内容</a></h2><h3><a href='#1、若自动生成的文件无法满足需求，如何进行定制化开发?' id='1、若自动生成的文件无法满足需求，如何进行定制化开发?' class='anchor'></a><a href='#1、若自动生成的文件无法满足需求，如何进行定制化开发?'>1、若自动生成的文件无法满足需求，如何进行定制化开发?</a></h3><p>我们先要了解 sw-precache 工具是怎么生成了这个 service-worker.js 文件。 要让 sw-precahce 工具生成 service-worker.js 文件，需要给它提供一个模板文件。 工具默认使用插件默认模板，但是您也可以定制自己的模板（最好参考默认模板），通过配置 templateFilePath 导入模板，实现定制化开发。在上面文件示例中，是通过<code>templateFilePath: &#39;config/sw.tmpl.js&#39;</code>导入定制化模板来生成 service-worker.js 文件。Lavas 导出项目中默认将导入模板文件放在<code>config/sw.tmpl.js</code> 下，便于开发者后期相应的维护开发。</p>\n<h3><a href='#2、lavas-导出项目中做了什么定制化呢-？' id='2、lavas-导出项目中做了什么定制化呢-？' class='anchor'></a><a href='#2、lavas-导出项目中做了什么定制化呢-？'>2、Lavas 导出项目中做了什么定制化呢 ？</a></h3><p>为了在 service-worker.js 文件内容更新时，能够让主页面及时提醒用户更新，我们在 config/sw.tmpl.js 文件的 activate 监听事件中通过<code>postMessage</code>发送 <code>&#39;sw.update&#39;</code>字符串，在主页面中，注册了 <code>onMessage</code>消息的监听 (这种方式是 Service Worker 和 主页面进程通信的方式)，一旦接收到 &#39;sw.update&#39; 字符串，主页面给出相应的更新提示。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// sw.tmpl.js文件中</span>\n<span class=\"hljs-keyword\">if</span> (!firstRegister) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">self</span>.clients.matchAll()\n        .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(clients)</span> </span>{\n            <span class=\"hljs-keyword\">if</span> (clients &amp;&amp; clients.length) {\n                <span class=\"hljs-keyword\">var</span> currentClient = clients[<span class=\"hljs-number\">0</span>];\n                currentClient.postMessage(<span class=\"hljs-string\">'sw.update'</span>);\n            }\n        });\n}\n</code></pre><h2><a href='#service-worker-的注册' id='service-worker-的注册' class='anchor'></a><a href='#service-worker-的注册'>Service Worker 的注册</a></h2><p>我们默认在 Lavas 导出工程中引入了 sw-register-webpack-pluginopen_in_new， 该插件专门用来做 service-worker.js 的注册。为了调试方便默认 develop 环境下不会注册 Service Worker, 只有在 production 环境下才会触发构建 <code>sw-register.js</code>入口。</p>\n<p>项目的自定义注册部分在项目的<code>src/sw-register.js</code>文件中，并在项目 build 后在 dist/index.html 最后引入执行。上面内容提及的 <code>service-worker.js</code> 更新时 <code>&#39;sw.update&#39;</code> 的信息监听和页面重载部分，也是在 <code>src/sw-register.js</code> 里完成的，开发者可根据需求做相应的扩展。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// src/sw-register.js 中注册，重载相关代码</span>\nnavigator.serviceWorker &amp;&amp; navigator.serviceWorker.register(<span class=\"hljs-string\">'/service-worker.js'</span>)\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-comment\">// 主页面监听 message 事件</span>\n        navigator.serviceWorker.addEventListener(<span class=\"hljs-string\">'message'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n\n            <span class=\"hljs-comment\">// Service Worker 如果更新成功会 postMessage 给页面，内容为 'sw.update'</span>\n            <span class=\"hljs-keyword\">if</span> (e.data === <span class=\"hljs-string\">'sw.update'</span>) {\n\n                <span class=\"hljs-comment\">// 开发者这自定义处理函数，也可以使用默认提供的用户提示，引导用户刷新</span>\n                <span class=\"hljs-comment\">// 这里建议引导用户 reload 处理，详细查看项目具体文件</span>\n                <span class=\"hljs-comment\">// location.reload();</span>\n            }\n        });\n    });\n</code></pre><pre class=\"hljs\"><code><span class=\"hljs-comment\">// build 后 sw-register-webpack-plugin 会在 index.html 中注入注册代码</span>\n<span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> script = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);\n    <span class=\"hljs-keyword\">var</span> firstScript = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];\n    script.type = <span class=\"hljs-string\">'text/javascript'</span>;\n    script.async = <span class=\"hljs-literal\">true</span>;\n    script.src = <span class=\"hljs-string\">'/sw-register.js?v='</span> + <span class=\"hljs-built_in\">Date</span>.now();\n    firstScript.parentNode.insertBefore(script, firstScript);\n};\n</code></pre><blockquote>\n<p>通过代码可以看出，sw-register-webpack-plugin 只是帮助开发者解决 service-worker.js 本身会被 HTTP 缓存的问题，但是我们强行的默认增加了一个 sw-register.js 的静态资源请求来保证 service-worker.js 永远能够最新。 如果服务端能够对 service-worker.js 做 no-cache 的处理，则不需要<code>sw-register-webpack-plugin</code>, 只需要把 <code>sw-register.js</code> 中的内容直接写进<code>src/app.js</code>就好了，不用单独请求。</p>\n</blockquote>\n<h2><a href='#动态缓存补充' id='动态缓存补充' class='anchor'></a><a href='#动态缓存补充'>动态缓存补充</a></h2><p>开发过程中，我们可能会对一些第三方的静态资源或者异步的请求进行动态的 Service Worker 缓存处理，Lavas 导出工程提供了这种动态配置机制：</p>\n<p>缓存内容及策略主要通过<code>config/sw-precache.js</code>配置文件来控制，常用配置的参数如下：</p>\n<ul>\n<li>配置项中有 mergeStaticsConfig 参数（定制化提供参数），默认是 true，即在没配置的情况下，默认缓存所有静态文件</li>\n<li>如果不想缓存所有的静态文件，需要配置 staticFileGlobs 参数，将需要缓存的静态文件，依次写入</li>\n<li>对于需要动态缓存的资源，可以通过配置文件中的 runtimeCaching 参数来配置，此时 sw-precache 模块就会帮我们引入 sw-toolbox 模块。所以在 sw-precache 中使用 runtimeCaching 配置选项可以参考 sw-toolbox 的配置规则，最终动态的路由规则会被添加到 service-worker.js 文件的最后。</li>\n</ul>\n<p>下面对 runtimeCaching 的具体配置也给出相应的介绍，后期开发应用还是比较广泛的。</p>\n<p>例如，下面的配置为两种不同URL模式定义了实时缓存行为。它对两种请求使用不同的处理程序，并为 <code>/fonts/</code> 模式相匹配的请求指定了最大可用缓存：</p>\n<pre class=\"hljs\"><code><span class=\"hljs-comment\">// 需要根据路由动态处理的文件</span>\nruntimeCaching: [\n    {\n        <span class=\"hljs-attr\">urlPattern</span>: <span class=\"hljs-regexp\">/\\/material-design-icon/</span>,\n        <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-string\">'fastest'</span>\n    },\n    {\n        <span class=\"hljs-attr\">urlPattern</span>: <span class=\"hljs-regexp\">/\\/fonts\\//</span>,\n        <span class=\"hljs-attr\">handler</span>: <span class=\"hljs-string\">'networkFirst'</span>,\n        <span class=\"hljs-attr\">options</span>: {\n            <span class=\"hljs-attr\">cache</span>: {\n                <span class=\"hljs-attr\">maxEntries</span>: <span class=\"hljs-number\">10</span>,\n                <span class=\"hljs-attr\">maxAgeSeconds</span>: <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">30</span>, <span class=\"hljs-comment\">// 30天有效期</span>\n                name: <span class=\"hljs-string\">'fonts-cache'</span>\n            }\n        }\n    }\n]\n</code></pre><p>runtimeCaching 的配置选项数组中的每个对象都需要一个 urlPattern，它是一个正则表达式或一个字符串，遵循 sw-toolbox 的配置约定。此外，还需要一个 handler，指定其读取动态资源的策略（包括 5 种：networkFirst、cacheFirst、fastest、cacheOnly、networkOnly）。</p>\n<p>下面配置相关参数介绍取自<a href=\"https://metaquant.org/programing/sw-precache-guide.html\">使用指南</a>， 为了您查阅方便直接备注在这里。</p>\n<h3><a href='#sw-toolbox-提供五种针对网络请求的处理程序(-handler-)，具体如下：' id='sw-toolbox-提供五种针对网络请求的处理程序(-handler-)，具体如下：' class='anchor'></a><a href='#sw-toolbox-提供五种针对网络请求的处理程序(-handler-)，具体如下：'>sw-toolbox 提供五种针对网络请求的处理程序( handler )，具体如下：</a></h3><ul>\n<li>networkFirst：首先尝试通过网络来处理请求，如果成功就将响应存储在缓存中，否则返回缓存中的资源来回应请求。它适用于以下类型的API请求，即你总是希望返回的数据是最新的，但是如果无法获取最新数据，则返回一个可用的旧数据。</li>\n<li>cacheFirst：如果缓存中存在与网络请求相匹配的资源，则返回相应资源，否则尝试从网络获取资源。 同时，如果网络请求成功则更新缓存。此选项适用于那些不常发生变化的资源，或者有其它更新机制的资源。</li>\n<li>fastest：从缓存和网络并行请求资源，并以首先返回的数据作为响应，通常这意味着缓存版本则优先响应。一方面，这个策略总会产生网络请求，即使资源已经被缓存了。另一方面，当网络请求完成时，现有缓存将被更新，从而使得下次读取的缓存将是最新的。</li>\n<li>cacheOnly：从缓存中解析请求，如果没有对应缓存则请求失败。此选项适用于需要保证不会发出网络请求的情况，例如在移动设备上节省电量。</li>\n<li>networkOnly：尝试从网络获取网址来处理请求。如果获取资源失败，则请求失败，这基本上与不使用Service Worker 的效果相同。</li>\n</ul>\n<h3><a href='#sw-toolbox-选项中的-cache-选项可以指定缓存的最大数目以及缓存时间等，具体如下：' id='sw-toolbox-选项中的-cache-选项可以指定缓存的最大数目以及缓存时间等，具体如下：' class='anchor'></a><a href='#sw-toolbox-选项中的-cache-选项可以指定缓存的最大数目以及缓存时间等，具体如下：'>sw-toolbox 选项中的 cache 选项可以指定缓存的最大数目以及缓存时间等，具体如下：</a></h3><ul>\n<li>cache.name[String]：用于存储实时缓存对象的缓存名称。使用唯一的名称允许您自定义缓存的最大空间和缓存时间。默认值：在运行时根据 Service Worker 的 registration.scope 值生成。</li>\n<li>cache.maxEntries[Number]：对缓存的项目实施 least-recently 缓存过期策略，可以将此项用于动态资源缓存。例如，将 <code>cache.maxEntries</code>设置为 10 意味着在第 11 个项目被缓存之后，最近最少使用的条目将被自动删除。缓存永远不会超过<code>cache.maxEntries</code>规定的最大数量。此选项将仅在同时设置了 cache.name 时生效，它可以单独使用或与<code>cache.maxAgeSeconds</code> 一起使用。默认值为空。</li>\n<li>cache.maxAgeSeconds[Number]：强制规定缓存项目的最大期限（以秒为单位),你可以用这个选项来存储没有自然过期策略的动态资源。例如，可以将 <code>cache.maxAgeSeconds</code> 设置为 60 x 60 x 24，这意味着任何超过一天之前的缓存都将被自动删除。此选项仅在同时设置了 <code>cache.name</code> 时生效，它也可以单独使用或与<code>cache.maxEntries</code>一起使用。默认值为空。我们建议设定有效期，如果不设定有效期，一直到 Service Worker 下次安装更新时才会更新该缓存，否则一直生效。</li>\n</ul>\n<h2><a href='#缓存更新难题及处理' id='缓存更新难题及处理' class='anchor'></a><a href='#缓存更新难题及处理'>缓存更新难题及处理</a></h2><p><a href=\"https://lavas.baidu.com/doc/offline-and-cache-loading/service-worker/how-to-use-service-worker#service-worker-版本更新\">查看 Service Worker 版本更新相关</a></p>\n<p>了解 Service Worker 基本的更新机制，Lavas 导出项目中默认主要解决了两个问题：</p>\n<ul>\n<li><p>当发布了新版本代码，怎么保证能拿到最新的 <code>service-worker.js</code>文件，而不是从缓存中读取。如果 <code>service-worker.js</code>不能及时更新，Service Worker 内的缓存的文件就不能更新，项目中怎么解决呢？\n我们在 <code>sw-rigester.js</code>的请求中增加了一个时间戳参数可参考上文示例，保证每次 sw-rigester.js 文件请求都获取最新的 sw-register.js 文件，且其中被注册的<code>service-worker.js</code> 文件请求也带有最新的版本参数，保证每次 service-worker.js 文件请求的都是最新版本。您可在 build 后，在 <code>dist/index.html</code>文件最后查看时间戳相关代码，包括版本参数等都是由 <code>sw-register-webpack-plugin</code> 插件完成，无需修改。</p>\n</li>\n<li><p>当 <code>service-worker.js</code> 文件更新后，打开的旧页面并不能及时感知，要重新加载时才能得到更新，这在新版本上线时很容易导致出现问题，所以我们希望在 service-worker.js 检测到版本更新，重新安装后能够及时的通知主页面（这里不包括首次安装的情况），并做出相应的处理，项目中默认提示页面更新，进行 reload 处理（src/sw-register.js），您也可以开发扩展，如改为弹层交互，告知用户有新版本，需要重载更新等。</p>\n</li>\n</ul>\n<blockquote>\n<p>我们虽然提供了缓存及时更新的方案，但还是推荐使用服务器对 <code>service-worker.js</code> 做 <code>no-cache</code>处理。</p>\n</blockquote>\n<h2><a href='#service-worker-容错降级方案' id='service-worker-容错降级方案' class='anchor'></a><a href='#service-worker-容错降级方案'>Service Worker 容错降级方案</a></h2><p>由于 Service Worker 的持久离线本地缓存的能力，能力越大风险越大。我们在设计 Service Worker 的时候需要考虑容错降级机制。推荐的做法是采取开关控制模式。这样可以及时全面的控制风险。</p>\n<pre class=\"hljs\"><code><span class=\"hljs-keyword\">if</span> (navigator.serviceWorker) {\n    fetch(开关的异步接口)\n        .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">status</span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (status 是 表示降级处理) {\n                <span class=\"hljs-comment\">// 注销所有已安装的 Service Worker</span>\n            }\n            <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-comment\">// 注册 Service Worker</span>\n            }\n        });\n}\n</code></pre><p>要注意的有几点：</p>\n<ul>\n<li>降级一定要注销掉 Service Worker ，而不是简单地不安装。这是因为降级前可能已经有用户访问过网站，导致 Service Worker 被安装，不注销的话降级开关对这部分用户是不起作用的。</li>\n<li>降级开关需要有即时性，因此服务器和 Service Worker 以及浏览器 http 缓存都不应该缓存该接口。</li>\n<li>降级开关异步接口如果条件允许的话最好走配置配送上线，遇到紧急问题，快速上线才是王道。</li>\n<li>出现问题并降级后，可能影响问题的排查，因此可以考虑加入对用户隐蔽的 debug 模式（如 url 传入特定字段，debug 模式中忽略降级接口。</li>\n</ul>\n",
      "tags": ["前端性能优化"],
      "updatedAt": "2017-11-18 14:47:25",
      "createdAt": "2017-11-06 19:15:48",
      "allowComment": false,
      "toc": "<p><strong>文章目录</strong></p>\n<ul>\n<li><a href=\"#维护-service-worker.js-文件\">维护 service-worker.js 文件</a><ul>\n<li><a href=\"#service-worker.js\">service-worker.js</a></li>\n<li><a href=\"#如何配置缓存内容\">如何配置缓存内容</a></li>\n<li><a href=\"#如何修改-service-worker.js-文件内容\">如何修改 service-worker.js 文件内容</a><ul>\n<li><a href=\"#1、若自动生成的文件无法满足需求，如何进行定制化开发?\">1、若自动生成的文件无法满足需求，如何进行定制化开发?</a></li>\n<li><a href=\"#2、lavas-导出项目中做了什么定制化呢-？\">2、Lavas 导出项目中做了什么定制化呢 ？</a></li>\n</ul>\n</li>\n<li><a href=\"#service-worker-的注册\">Service Worker 的注册</a></li>\n<li><a href=\"#动态缓存补充\">动态缓存补充</a><ul>\n<li><a href=\"#sw-toolbox-提供五种针对网络请求的处理程序(-handler-\">sw-toolbox 提供五种针对网络请求的处理程序( handler )，具体如下：</a>，具体如下：)</li>\n<li><a href=\"#sw-toolbox-选项中的-cache-选项可以指定缓存的最大数目以及缓存时间等，具体如下：\">sw-toolbox 选项中的 cache 选项可以指定缓存的最大数目以及缓存时间等，具体如下：</a></li>\n</ul>\n</li>\n<li><a href=\"#缓存更新难题及处理\">缓存更新难题及处理</a></li>\n<li><a href=\"#service-worker-容错降级方案\">Service Worker 容错降级方案</a></li>\n</ul>\n</li>\n</ul>\n",
      "pathName": "about-service-worker"
    },
  };

  try {
    result = JSON.parse(result);
  } catch (err) {
    console.log(err);
  }
  ctx.body = result
}

export default {
  getArticle,
}
